

package Analizadores;
import java_cup.runtime.*;
import Tabla.*;

// ---------> Codigo para las acciones gramaticales
action code
{:
    public TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();

:}


parser code     //Codigo que se le agrega al parser
{:
    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_fatal_error(errMsg, null);
    }
:}

//Declaracion de terminales
terminal  PUT, GET, DIM, AS, INTEGER, STRING, FLOAT, WHILE, IF, ELSE, 
          OP_AS, OP_SUM, OP_RES, OP_MUL, OP_DIV, OP_MEN, OP_MENIG, OP_MAY, OP_MAYIG, OP_DIST, 
          COMA, PYC, PA, PC, LA, LC, CA, CC, OP_AND, OP_OR, 
          OP_COMP, OP_NOT, CONTAR;


terminal String ID, CONST_INT, CONST_FLOAT, CONST_STR, CTE_HEXA, CTE_BIN;


//Declaracion de no terminales
non terminal Symbol inicio, prog, asig, sent, 
                    expresion, termino, factor, seleccion,
                    iteracion, condicion,comparacion, comparador, 
                    seleccion_else, dec, sent_put, sent_get,
                     list_var, list_td, tipo_dato, variable, list_exp;

start with inicio;

//Reglas gramaticales
inicio          ::= prog
                    {:  tablaDeSimbolos.guardarTabla();
                         System.out.println("COMPILACION EXITOSA!");
                    :};  

prog           ::= sent
                    {: 
                         System.out.println("prog -> sent");
                    :}
               | prog sent
                    {: 
                         System.out.println("prog -> prog sent");
                    :}; 
sent                ::= asig PYC
                    {: 
                         System.out.println("sent -> asig");
                    :}
                    | iteracion 
                    {:
                         System.out.println("sent -> iteracion");
                    :}
                    | dec
                     {: 
                         System.out.println("sent -> dec");
                    :}
                    | sent_put PYC
                     {: 
                         System.out.println("sent -> sent_put PYC");
                    :}
                    | sent_get PYC
                     {: 
                         System.out.println("sent -> sent_get PYC");
                    :}
                    | seleccion
                    {: 
                      System.out.println("sent -> seleccion");
                    :}; 

asig           ::= ID OP_AS expresion
                    {: 
                         System.out.println("asig -> ID OP_ASig expresion");
                    :};

iteracion      ::= WHILE PA condicion PC LA prog  LC
                    {: 
                         System.out.println("iteracion -> WHILE condicion  LA prog  lc");
                    :}; 
seleccion      ::= IF PA condicion  PC LA prog LC
                    {: 
                         System.out.println("seleccion -> IF condicion LA prog LC");
                    :}
                    | IF PA condicion  PC LA prog LC seleccion_else  {:
                              System.out.println("seleccion -> IF condicion LA prog LC else prog");
                     :};

seleccion_else ::= ELSE LA prog LC
                {:
                       System.out.println("seleccion_else -> IF condicion LA prog LC ELSE prog");

                :} ;

condicion      ::= comparacion
                    {: 
                     System.out.println("condicion -> comparacion");
                    :} 
                    | comparacion OP_AND  comparacion
                    {: 
                     System.out.println("condicion -> comparacion OP_AND  comparacion");
                    :} 
                    | comparacion OP_OR comparacion
                    {: 
                     System.out.println("condicion -> comparacion OP_OR comparacion");
                    :}
                    | OP_NOT comparacion
                    {: 
                     System.out.println("condicion -> OP_NOT comparacion");
                    :}; 
comparacion    ::= expresion comparador expresion
                    {: 
                     System.out.println("comparacion -> expresion comparador expresion");
                    :}; 
comparador     ::= OP_MAYIG:OP_MAYIG 
                    {: 
                         System.out.println("comparador -> OP_MAYIG " );
                         System.out.println("operador:" + OP_MAYIG );
		          :}
                    | OP_MENIG:OP_MENIG 
                    {: 
                         System.out.println("comparador -> OP_MENIG" );
                         System.out.println("operador:" + OP_MENIG);
		          :}
                    | OP_MAY:OP_MAY 
                    {: 
                         System.out.println("comparador -> OP_MAY" );
                         System.out.println("operador:" + OP_MAY );
		          :}
                    | OP_MEN:OP_MEN
                    {: 
                         System.out.println("comparador -> OP_MEN" );
                         System.out.println("operador:" +OP_MEN );
		          :}
                    | OP_COMP:OP_COMP
                    {: 
                         System.out.println("comparador -> OP_COMP" );
                         System.out.println("operador:" + OP_COMP);
		          :}
                    | OP_DIST:OP_DIST
                    {: 
                         System.out.println("comparador -> OP_DIST" );
                         System.out.println("operador:" + OP_DIST);
		          :};
        
expresion      ::= expresion OP_SUM termino
               {:
                    System.out.println("expresion -> expresion OP_SUM termino");     
               :}
               | expresion OP_RES termino
               {:
                    System.out.println("expresion -> expresion OP_RES termino");     
               :}
               | termino
               {:
                    System.out.println("expresion -> termino");
               :};

termino        ::=  termino OP_DIV factor
               {: 
                    System.out.println("termino -> termino OP_DIV factor");
		     :}
		     | termino OP_MUL factor 
               {: 
                    System.out.println("termino -> termino OP_MUL factor");
		     :}
               | factor 
               {: 
                    System.out.println("termino -> factor");
               :};
variable       ::= CONST_STR: CONST_STR {:
                    tablaDeSimbolos.agregarEnTabla("_"+CONST_STR, null, CONST_STR, null);
                    System.out.println("variable -> CONST_STRING");
               :} 
               | ID:ID {: 
                          tablaDeSimbolos.agregarEnTabla("_"+ID, null, ID, null);
                         System.out.println("variable -> ID");
               :}
               | CONST_INT:CONST_INT {: 
                         tablaDeSimbolos.agregarEnTabla("_"+CONST_INT, null, CONST_INT, null);
                         System.out.println("variable -> CONST_INT");
               :}
               | CONST_FLOAT:CONST_FLOAT {: 
                          tablaDeSimbolos.agregarEnTabla("_"+CONST_FLOAT, null, CONST_FLOAT, null);
                         System.out.println("variable -> CONST_FLOAT");
               :}
                | CTE_BIN:CTE_BIN {: 
                          tablaDeSimbolos.agregarEnTabla("_"+CTE_BIN, null, CTE_BIN, null);
                         System.out.println("variable -> CTE_BIN");
               :}
                | CTE_HEXA:CTE_HEXA {: 
                         tablaDeSimbolos.agregarEnTabla("_"+CTE_HEXA, null, CTE_HEXA, null);
                         System.out.println("variable -> CTE_HEXA");
               :};
sent_put       ::= PUT variable {:
                    System.out.println("sent_put -> PUT variable");
               :};

sent_get     ::= GET ID:ID {:
                    tablaDeSimbolos.agregarEnTabla("_"+ID, null, ID, null);
                    System.out.println("sent_get -> GET ID");
               :};

dec           ::= DIM OP_MEN list_var OP_MAY AS OP_MEN list_td OP_MAY{:
                    System.out.println("dec -> DIM OP_MEN list_var OP_MAY AS OP_MEN list_td OP_MAY");
               :};    


list_var ::= list_var COMA ID:ID
               {:
                         tablaDeSimbolos.agregarEnTabla("_"+ID, null, ID, null);
                         System.out.println("list_var -> list_var COMA ID: ");
               :};

list_var ::= ID:ID
               {:
                     tablaDeSimbolos.agregarEnTabla("_"+ID, null, ID, null);
                     System.out.println("list_var -> ID ");
               :};
               
list_td ::= list_td COMA tipo_dato
               {:
                         System.out.println("list_td -> list_td COMA tipo_dato");
               :};
               
list_td ::= tipo_dato
               {:
                         System.out.println("list_td -> TIPO DE DATO ");
               :};
               
tipo_dato ::= INTEGER 
               {:
                         System.out.println("tipo_dato -> INTEGER");
               :}
               | FLOAT
               {:
                         System.out.println("tipo_dato -> FLOAT");:}
               | STRING
               {:
                         System.out.println("tipo_dato -> STRING");
               :};

list_exp       ::= list_exp COMA expresion
                  {:
                    System.out.println("list_exp -> list_exp COMA expresion");
                   :}
                | expresion
               {: 
                    System.out.println("list_exp -> expresion");
               :} ;
factor         ::= ID:ID
               {: 
                     tablaDeSimbolos.agregarEnTabla("_"+ID, null, ID, null);
                    System.out.println("factor -> ID: " + ID);
                    System.out.println("ID: " + ID);
               :}
               | CONST_INT:CONST_INT 
               {: 
                    tablaDeSimbolos.agregarEnTabla("_"+CONST_INT, null, CONST_INT, null);
                    System.out.println("factor -> CONST_INT: " + CONST_INT);
		          System.out.println("constante entera: " + CONST_INT);
		     :}
               | CONST_FLOAT:CONST_FLOAT
               {:   tablaDeSimbolos.agregarEnTabla("_"+CONST_FLOAT, null, CONST_FLOAT, null);
                    System.out.println("factor -> CONST_FLOAT: " + CONST_FLOAT);
		          System.out.println("constante flotante: " + CONST_FLOAT);
		     :}
               | CONST_STR:CONST_STR
               {: 
                    tablaDeSimbolos.agregarEnTabla("_"+CONST_STR, null, CONST_STR, null);
                    System.out.println("factor -> CONST_STR: " + CONST_STR);
		          System.out.println("constante CONST_STR: " + CONST_STR);
		     :}
               | CTE_BIN:CTE_BIN
               {: 
                     tablaDeSimbolos.agregarEnTabla("_"+CTE_BIN, null, CTE_BIN, null);
                    System.out.println("factor -> cte_bin: " + CTE_BIN);
		          System.out.println("constante CTE_BIN: " + CTE_BIN);
		     :}
               | CTE_HEXA:CTE_HEXA
               {: 
                    tablaDeSimbolos.agregarEnTabla("_"+CTE_HEXA, null, CTE_HEXA, null);
                    System.out.println("factor -> CTE_HEXA: " + CTE_HEXA);
		          System.out.println("constante CTE_HEXA: " + CTE_HEXA);
		     :}
               | PA expresion PC
               {: 
                    System.out.println("factor -> PA expresion PC");
		     :}
               | CONTAR PA expresion PYC CA list_exp CC PC
               {: 
                    System.out.println("factor -> CONTAR PA expresion PYC CA list_exp CC PC");
		     :};  

 